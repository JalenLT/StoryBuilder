-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.attachments
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    mime_type character varying(255) COLLATE pg_catalog."default",
    path character varying(255) COLLATE pg_catalog."default" NOT NULL,
    size bigint NOT NULL,
    uploaded_by bigint NOT NULL,
    attachable_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    attachable_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT attachments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.block_connections
(
    id bigserial NOT NULL,
    block_a_id bigint NOT NULL,
    block_b_id bigint NOT NULL,
    notes text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT block_connections_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.block_points
(
    id bigserial NOT NULL,
    block_id bigint NOT NULL,
    point_id bigint NOT NULL,
    index integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT block_points_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.blocks
(
    id bigserial NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    creator_id bigint NOT NULL,
    story_id bigint NOT NULL,
    setting_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT blocks_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cache
(
    key character varying(255) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    expiration integer NOT NULL,
    CONSTRAINT cache_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.cache_locks
(
    key character varying(255) COLLATE pg_catalog."default" NOT NULL,
    owner character varying(255) COLLATE pg_catalog."default" NOT NULL,
    expiration integer NOT NULL,
    CONSTRAINT cache_locks_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.character_involvements
(
    id bigserial NOT NULL,
    character_id bigint NOT NULL,
    involvable_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    involvable_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT character_involvements_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.character_relationships
(
    id bigserial NOT NULL,
    character_a_id bigint NOT NULL,
    character_b_id bigint NOT NULL,
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    notes text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT character_relationships_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.characters
(
    id bigserial NOT NULL,
    first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    alias character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    background text COLLATE pg_catalog."default" NOT NULL,
    age integer NOT NULL,
    gender character varying(255) COLLATE pg_catalog."default" NOT NULL,
    motivation text COLLATE pg_catalog."default" NOT NULL,
    story_id bigint NOT NULL,
    creator_id bigint NOT NULL,
    setting_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT characters_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.failed_jobs
(
    id bigserial NOT NULL,
    uuid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    connection text COLLATE pg_catalog."default" NOT NULL,
    queue text COLLATE pg_catalog."default" NOT NULL,
    payload text COLLATE pg_catalog."default" NOT NULL,
    exception text COLLATE pg_catalog."default" NOT NULL,
    failed_at timestamp(0) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT failed_jobs_pkey PRIMARY KEY (id),
    CONSTRAINT failed_jobs_uuid_unique UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.features
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT features_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.genres
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    image character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT genres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.job_batches
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total_jobs integer NOT NULL,
    pending_jobs integer NOT NULL,
    failed_jobs integer NOT NULL,
    failed_job_ids text COLLATE pg_catalog."default" NOT NULL,
    options text COLLATE pg_catalog."default",
    cancelled_at integer,
    created_at integer NOT NULL,
    finished_at integer,
    CONSTRAINT job_batches_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.jobs
(
    id bigserial NOT NULL,
    queue character varying(255) COLLATE pg_catalog."default" NOT NULL,
    payload text COLLATE pg_catalog."default" NOT NULL,
    attempts smallint NOT NULL,
    reserved_at integer,
    available_at integer NOT NULL,
    created_at integer NOT NULL,
    CONSTRAINT jobs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.migrations
(
    id serial NOT NULL,
    migration character varying(255) COLLATE pg_catalog."default" NOT NULL,
    batch integer NOT NULL,
    CONSTRAINT migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.password_reset_tokens
(
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.points
(
    id bigserial NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    created_by bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT points_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sessions
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id bigint,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    payload text COLLATE pg_catalog."default" NOT NULL,
    last_activity integer NOT NULL,
    CONSTRAINT sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.setting_features
(
    id bigserial NOT NULL,
    setting_id bigint NOT NULL,
    feature_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT setting_features_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.settings
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    world character varying(255) COLLATE pg_catalog."default" NOT NULL,
    era character varying(255) COLLATE pg_catalog."default" NOT NULL,
    climate character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT settings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.stories
(
    id bigserial NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    creator_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT stories_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.story_genres
(
    id bigserial NOT NULL,
    story_id bigint NOT NULL,
    genre_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT story_genres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.story_tags
(
    id bigserial NOT NULL,
    story_id bigint NOT NULL,
    tag_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT story_tags_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tags
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    image character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT tags_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email_verified_at timestamp(0) without time zone,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    remember_token character varying(100) COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_unique UNIQUE (email)
);

ALTER TABLE IF EXISTS public.attachments
    ADD CONSTRAINT attachments_uploaded_by_foreign FOREIGN KEY (uploaded_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.block_connections
    ADD CONSTRAINT block_connections_block_a_id_foreign FOREIGN KEY (block_a_id)
    REFERENCES public.blocks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.block_connections
    ADD CONSTRAINT block_connections_block_b_id_foreign FOREIGN KEY (block_b_id)
    REFERENCES public.blocks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.block_points
    ADD CONSTRAINT block_points_block_id_foreign FOREIGN KEY (block_id)
    REFERENCES public.blocks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.block_points
    ADD CONSTRAINT block_points_point_id_foreign FOREIGN KEY (point_id)
    REFERENCES public.points (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.blocks
    ADD CONSTRAINT blocks_creator_id_foreign FOREIGN KEY (creator_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.blocks
    ADD CONSTRAINT blocks_story_id_foreign FOREIGN KEY (story_id)
    REFERENCES public.stories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.character_involvements
    ADD CONSTRAINT character_involvements_character_id_foreign FOREIGN KEY (character_id)
    REFERENCES public.characters (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.character_relationships
    ADD CONSTRAINT character_relationships_character_a_id_foreign FOREIGN KEY (character_a_id)
    REFERENCES public.characters (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.character_relationships
    ADD CONSTRAINT character_relationships_character_b_id_foreign FOREIGN KEY (character_b_id)
    REFERENCES public.characters (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.characters
    ADD CONSTRAINT characters_creator_id_foreign FOREIGN KEY (creator_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.characters
    ADD CONSTRAINT characters_setting_id_foreign FOREIGN KEY (setting_id)
    REFERENCES public.settings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.characters
    ADD CONSTRAINT characters_story_id_foreign FOREIGN KEY (story_id)
    REFERENCES public.stories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.points
    ADD CONSTRAINT points_created_by_foreign FOREIGN KEY (created_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.setting_features
    ADD CONSTRAINT setting_features_feature_id_foreign FOREIGN KEY (feature_id)
    REFERENCES public.features (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.setting_features
    ADD CONSTRAINT setting_features_setting_id_foreign FOREIGN KEY (setting_id)
    REFERENCES public.settings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.stories
    ADD CONSTRAINT stories_creator_id_foreign FOREIGN KEY (creator_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.story_genres
    ADD CONSTRAINT story_genres_genre_id_foreign FOREIGN KEY (genre_id)
    REFERENCES public.genres (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.story_genres
    ADD CONSTRAINT story_genres_story_id_foreign FOREIGN KEY (story_id)
    REFERENCES public.stories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.story_tags
    ADD CONSTRAINT story_tags_story_id_foreign FOREIGN KEY (story_id)
    REFERENCES public.stories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.story_tags
    ADD CONSTRAINT story_tags_tag_id_foreign FOREIGN KEY (tag_id)
    REFERENCES public.tags (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;